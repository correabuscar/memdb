From a80111e26dac75c6c17c8a7e04d8c837e4b26874 Mon Sep 17 00:00:00 2001
From: nethunters-dev <50048463+nethunters-dev@users.noreply.github.com>
Date: Wed, 3 Feb 2021 19:39:11 +0000
Subject: [PATCH 1/3] updated to use dashmap and tests to use async_std

---
 Cargo.toml    |  4 ++--
 src/lib.rs    | 27 +++++++++++++++------------
 tests/test.rs | 10 +++++-----
 3 files changed, 22 insertions(+), 19 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index df94dce..f98cde7 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -10,7 +10,7 @@ readme = "README.md"
 edition = "2018"
 
 [dependencies]
-parking_lot = "0.11.0"
+dashmap = "4.0.2"
 
 [dev-dependencies]
-runtime = "0.3.0-alpha.4"
+async-std = { version = "1.9.0", features = ["attributes"] }
diff --git a/src/lib.rs b/src/lib.rs
index 405680e..6a9cb83 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -4,7 +4,7 @@
 //! ## Examples
 //!
 //! ```
-//! # #[runtime::main]
+//! # #[async_std::main]
 //! # async fn main() -> std::io::Result<()> {
 //! let mut db = memdb::Memdb::open().await?;
 //! db.set("beep", "boop").await?;
@@ -13,17 +13,15 @@
 //! # Ok(())
 //! # }
 //! ```
+use dashmap::DashMap;
 
-use parking_lot::RwLock;
-
-use std::collections::HashMap;
 use std::io;
 use std::sync::Arc;
 
 /// Key-value database.
-#[derive(Debug, Clone)]
+#[derive(Clone)]
 pub struct Memdb {
-    hashmap: Arc<RwLock<HashMap<Vec<u8>, Vec<u8>>>>,
+    hashmap: Arc<DashMap<Vec<u8>, Vec<u8>>>,
 }
 
 impl Memdb {
@@ -31,7 +29,7 @@ impl Memdb {
     #[inline]
     pub async fn open() -> io::Result<Self> {
         Ok(Self {
-            hashmap: Arc::new(RwLock::new(HashMap::<Vec<u8>, Vec<u8>>::new())),
+            hashmap: Arc::new(DashMap::<Vec<u8>, Vec<u8>>::new()),
         })
     }
 
@@ -43,7 +41,6 @@ impl Memdb {
         value: impl AsRef<[u8]>,
     ) -> io::Result<Option<Vec<u8>>> {
         let hashmap = self.hashmap.clone();
-        let mut hashmap = hashmap.write();
         Ok(hashmap.insert(key.as_ref().to_owned(), value.as_ref().to_owned()))
     }
 
@@ -52,15 +49,21 @@ impl Memdb {
     #[inline]
     pub async fn get(&self, key: impl AsRef<[u8]>) -> io::Result<Option<Vec<u8>>> {
         let key = key.as_ref().to_owned();
-        let hashmap = &self.hashmap.read();
-        Ok(hashmap.get(&key).cloned())
+        let hashmap = &self.hashmap;
+        match hashmap.get(&key) {
+            Some(value) => {
+                let value = value.clone();
+                Ok(Some(value))
+            }
+            None => Ok(None),
+        }
     }
 
     /// Delete a value from the database.
     #[inline]
-    pub async fn del(&mut self, key: impl AsRef<[u8]>) -> io::Result<Option<Vec<u8>>> {
+    pub async fn del(&mut self, key: impl AsRef<[u8]>) -> io::Result<Option<(Vec<u8>, Vec<u8>)>> {
         let key = key.as_ref().to_owned();
-        let hashmap = &mut self.hashmap.write();
+        let hashmap = &mut self.hashmap;
         Ok(hashmap.remove(&key))
     }
 }
diff --git a/tests/test.rs b/tests/test.rs
index 734bd26..487d3b2 100644
--- a/tests/test.rs
+++ b/tests/test.rs
@@ -1,8 +1,8 @@
 use memdb::Memdb;
-use std::error;
+
 use std::io;
 
-#[runtime::test]
+#[async_std::test]
 async fn set_get() -> io::Result<()> {
     let mut db = Memdb::open().await?;
     db.set("beep", "boop").await?;
@@ -11,14 +11,14 @@ async fn set_get() -> io::Result<()> {
     Ok(())
 }
 
-#[runtime::test]
+#[async_std::test]
 async fn threaded_set_get() -> io::Result<()> {
     let db = Memdb::open().await?;
 
     let mut handle = db.clone();
-    runtime::spawn(async move {
+    async_std::task::spawn(async move {
         handle.set("beep", "boop").await?;
-        runtime::spawn(async move {
+        async_std::task::spawn(async move {
             let handle = handle.clone();
             let val = handle.get("beep").await?;
             assert_eq!(val, Some("boop".as_bytes().to_owned()));

From 11666815bada5a8713a4251e03729695c1e14e7b Mon Sep 17 00:00:00 2001
From: nethunters-dev <50048463+nethunters-dev@users.noreply.github.com>
Date: Wed, 3 Feb 2021 19:43:16 +0000
Subject: [PATCH 2/3] readded accidentally removed Debug for Memdb

---
 src/lib.rs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/lib.rs b/src/lib.rs
index 6a9cb83..ff4fd3c 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -19,7 +19,7 @@ use std::io;
 use std::sync::Arc;
 
 /// Key-value database.
-#[derive(Clone)]
+#[derive(Debug, Clone)]
 pub struct Memdb {
     hashmap: Arc<DashMap<Vec<u8>, Vec<u8>>>,
 }

From 5a50fb5565e0c64239cda20bb579b0d1d4ac5dc3 Mon Sep 17 00:00:00 2001
From: nethunters-dev <50048463+nethunters-dev@users.noreply.github.com>
Date: Wed, 3 Feb 2021 19:47:12 +0000
Subject: [PATCH 3/3] realigned return type of del with original

---
 src/lib.rs | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/src/lib.rs b/src/lib.rs
index ff4fd3c..888cea2 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -50,20 +50,23 @@ impl Memdb {
     pub async fn get(&self, key: impl AsRef<[u8]>) -> io::Result<Option<Vec<u8>>> {
         let key = key.as_ref().to_owned();
         let hashmap = &self.hashmap;
-        match hashmap.get(&key) {
+        Ok(match hashmap.get(&key) {
             Some(value) => {
                 let value = value.clone();
-                Ok(Some(value))
+                Some(value)
             }
-            None => Ok(None),
-        }
+            None => None,
+        })
     }
 
     /// Delete a value from the database.
     #[inline]
-    pub async fn del(&mut self, key: impl AsRef<[u8]>) -> io::Result<Option<(Vec<u8>, Vec<u8>)>> {
+    pub async fn del(&mut self, key: impl AsRef<[u8]>) -> io::Result<Option<Vec<u8>>> {
         let key = key.as_ref().to_owned();
         let hashmap = &mut self.hashmap;
-        Ok(hashmap.remove(&key))
+        Ok(match hashmap.remove(&key) {
+            Some((_, value)) => Some(value),
+            None => None,
+        })
     }
 }
